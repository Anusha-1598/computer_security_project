{"ast":null,"code":"var _jsxFileName = \"/workspaces/computer_security_project/frontend/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DOMPurify from \"dompurify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setLoginData, resetLoginForm, setLoginUser } from \"../redux/loginSlice\";\nimport FormInput from \"./FormInput\";\nimport Button from \"./Button\";\nimport \"./Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const dispatch = useDispatch();\n  const loginData = useSelector(state => state.login);\n  const [errors, setErrors] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const sanitizedValue = DOMPurify.sanitize(e.target.value);\n    dispatch(setLoginData({\n      name: e.target.name,\n      value: sanitizedValue\n    }));\n  };\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:5000/verifyCookie\", {\n      method: \"POST\",\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status === 200) {\n        res.json().then(res => {\n          dispatch(setLoginUser(res.userId));\n          let goToDashBoard = () => navigate(\"/dashboard\");\n          goToDashBoard();\n        });\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n  }, []);\n  const validate = () => {\n    const errors = {};\n    if (!loginData.username.trim()) {\n      errors.username = \"Username is required\";\n    }\n    if (!loginData.password) {\n      errors.password = \"Password is required\";\n    }\n    return errors;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const validationErrors = validate();\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/login\", {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"http://127.0.0.1:5000\",\n          \"Access-Control-Allow-Credentials\": \"true\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          username: loginData.username,\n          password: loginData.password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(\"Login successful!\");\n        dispatch(setLoginUser(loginData.username));\n        dispatch(resetLoginForm());\n        let goToDashBoard = () => navigate(\"/dashboard\");\n        goToDashBoard();\n      } else {\n        setMessage(`Login failed: ${data.message}`);\n      }\n    } catch (error) {\n      setMessage(`Login failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        name: \"username\",\n        label: \"Username\",\n        value: loginData.username,\n        onChange: handleChange,\n        error: errors.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: passwordVisible ? \"text\" : \"password\",\n        name: \"password\",\n        label: \"Password\",\n        value: loginData.password,\n        onChange: handleChange,\n        error: errors.password,\n        toggleVisibility: () => setPasswordVisible(!passwordVisible),\n        isPassword: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        label: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"QQK3FkowaryDOcGNdtADeVi0lL0=\", false, function () {\n  return [useDispatch, useSelector, useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","DOMPurify","useNavigate","setLoginData","resetLoginForm","setLoginUser","FormInput","Button","jsxDEV","_jsxDEV","Login","_s","dispatch","loginData","state","login","errors","setErrors","message","setMessage","passwordVisible","setPasswordVisible","navigate","handleChange","e","sanitizedValue","sanitize","target","value","name","fetch","method","credentials","then","res","status","json","userId","goToDashBoard","catch","err","alert","validate","username","trim","password","handleSubmit","preventDefault","validationErrors","Object","keys","length","response","headers","Accept","body","JSON","stringify","data","ok","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","label","onChange","toggleVisibility","isPassword","_c","$RefreshReg$"],"sources":["/workspaces/computer_security_project/frontend/src/components/Login.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DOMPurify from \"dompurify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  setLoginData,\r\n  resetLoginForm,\r\n  setLoginUser,\r\n} from \"../redux/loginSlice\";\r\nimport FormInput from \"./FormInput\";\r\nimport Button from \"./Button\";\r\nimport \"./Login.css\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const loginData = useSelector((state) => state.login);\r\n  const [errors, setErrors] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const navigate = useNavigate();\r\n  const handleChange = (e) => {\r\n    const sanitizedValue = DOMPurify.sanitize(e.target.value);\r\n    dispatch(setLoginData({ name: e.target.name, value: sanitizedValue }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://127.0.0.1:5000/verifyCookie\", {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          res.json().then((res) => {\r\n            dispatch(setLoginUser(res.userId));\r\n            let goToDashBoard = () => navigate(\"/dashboard\");\r\n            goToDashBoard();\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        alert(err.message);\r\n      });\r\n  }, []);\r\n\r\n  const validate = () => {\r\n    const errors = {};\r\n    if (!loginData.username.trim()) {\r\n      errors.username = \"Username is required\";\r\n    }\r\n    if (!loginData.password) {\r\n      errors.password = \"Password is required\";\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const validationErrors = validate();\r\n    if (Object.keys(validationErrors).length > 0) {\r\n      setErrors(validationErrors);\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/login\", {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Access-Control-Allow-Origin\": \"http://127.0.0.1:5000\",\r\n          \"Access-Control-Allow-Credentials\": \"true\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username: loginData.username,\r\n          password: loginData.password,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage(\"Login successful!\");\r\n        dispatch(setLoginUser(loginData.username));\r\n        dispatch(resetLoginForm());\r\n        let goToDashBoard = () => navigate(\"/dashboard\");\r\n        goToDashBoard();\r\n      } else {\r\n        setMessage(`Login failed: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      setMessage(`Login failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <h2>Login</h2>\r\n      {message && <p>{message}</p>}\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          type=\"text\"\r\n          name=\"username\"\r\n          label=\"Username\"\r\n          value={loginData.username}\r\n          onChange={handleChange}\r\n          error={errors.username}\r\n        />\r\n        <FormInput\r\n          type={passwordVisible ? \"text\" : \"password\"}\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          value={loginData.password}\r\n          onChange={handleChange}\r\n          error={errors.password}\r\n          toggleVisibility={() => setPasswordVisible(!passwordVisible)}\r\n          isPassword\r\n        />\r\n        <Button type=\"submit\" label=\"Login\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}